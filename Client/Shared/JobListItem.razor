

<li draggable="@(isInEditMode == false ? "true" : "")"
@key="Item.Id" tabindex="1" 
@ondrop="@(()=> OnDropHandler(this))"
@ondragstart="@(()=> OnDragStartHandler(this))"
@ondragover="@(() => OnDragOverHandler(this))"
@ondragenter="@(() => OnDragEnterHandler(this))"
@ondragleave="@(() => OnDragLeaveHandler(this))"
>
    <div class="task-container">
        <div class="task-formatter rounded container @(isSelected ? "task-selected" : "") @(isDraggedOver ? "draggedOver" : "" )">
            @if (isInEditMode == false)
            {
                <div class="row">
                    <h6 class="task-name col-sm my-1">@Item.Name</h6>
                    <span class=" col-sm-4 col-xl-3 text-end my-1">
                        @Item.TimeWorkedOnTask
                        <MudIconButton Icon="@Icons.Material.Sharp.AccessTime" Size="Size.Small" Variant="Variant.Filled"
                                       Color="@ButtonColor" aria-label="track" OnClick="@(() => OnTrackingClick.InvokeAsync(Item.Id))"></MudIconButton>
                    </span>

                </div>

                <div class="row">
                    <span class="task-description col-sm my-1" >@Item.Description</span>
                    <span class=" col-sm-4 col-xl-3 text-end my-1">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Filled" Color="@ButtonColor"
                                       aria-label="delete" OnClick="@(() => OnDeleteClick.InvokeAsync(Item.Id))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Filled" Color="@ButtonColor"
                                       aria-label="edit" OnClick="@(() => OnEditClickHandler())"></MudIconButton>
                    </span>
                </div>
            }
            else{
                <div class="row">
                    <h6 class="task-name col-sm my-1">
                        <MudTextField @bind-Value="@Item.Name" Label="Name" Variant="Variant.Text"
                                      Style="color:white" Clearable="true" DebounceInterval="500"></MudTextField>
                    </h6>
                    <span class=" col-sm-4 col-xl-3 text-end my-1">
                        @Item.TimeWorkedOnTask
                        <MudIconButton Icon="@Icons.Material.Sharp.AccessTime" Size="Size.Small" Variant="Variant.Filled"
                                       Color="@ButtonColor" aria-label="track" OnClick="@(() => OnTrackingClick.InvokeAsync(Item.Id))"></MudIconButton>
                    </span>

                </div>

                <div class="row">
                    <span class="task-description col-sm my-1">
                        <MudTextField @bind-Value="@Item.Description" Label="Description" Lines="3"
                            Clearable="true" Variant="Variant.Text" Style="color:white" DebounceInterval="500" AutoGrow>
                        </MudTextField>
                    </span>
                    <span class=" col-sm-4 col-xl-3 text-end my-1">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Filled" Color="@ButtonColor"
                                       aria-label="delete" OnClick="@(() => OnDeleteClick.InvokeAsync(Item.Id))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Filled" Color="@ButtonColor"
                                       aria-label="edit" OnClick="@(() => OnEditClickHandler())"></MudIconButton>
                    </span>
                </div>  
            }
        </div>
    </div>
</li>


@code{

    [Parameter]
    public JobModel Item { get; set; }
    [Parameter]
    public EventCallback<Guid> OnStartDrag { get; set; }
    [Parameter]
    public EventCallback<Guid> OnDrop { get; set; }
    [Parameter]
    public EventCallback<Guid> OnDeleteClick { get; set; }
    [Parameter]
    public EventCallback<Guid> OnEditClickFinished { get; set; }
    [Parameter]
    public EventCallback<Guid> OnTrackingClick { get; set; }
    [Parameter]
    public bool isSelected { get; set; } = false;


    public bool isInEditMode = false;
    public bool isDraggedOver = false;
    Color ButtonColor = Color.Inherit;
    public int dragenterCounter = 0;
    string Cursor = "pointer";

    private void OnEditClickHandler()
    {
        isInEditMode = !isInEditMode;
        Console.WriteLine(nameof(OnEditClickHandler));
        //this.OnEditClickFinished.InvokeAsync(Item.Id);
    }

    private void OnDragEnterHandler(JobListItem item)
    {
        Console.WriteLine(nameof(OnDragEnterHandler) + " " + item.Item.Name + " " + item.isDraggedOver);
        dragenterCounter++;
        if (item.isDraggedOver != true)
        {
            item.isDraggedOver = true;
            StateHasChanged();
        }
    }

    private void OnDragLeaveHandler(JobListItem item)
    {
        Console.WriteLine(nameof(OnDragLeaveHandler) + " " + item.Item.Name + " " + item.isDraggedOver);
        dragenterCounter--;
        if (item.isDraggedOver != false && dragenterCounter == 0)
        {
            item.isDraggedOver = false;
            StateHasChanged();
        }

    }

    private void OnDragOverHandler(JobListItem item)
    {
        if (item.isDraggedOver != true)
        {
            Console.WriteLine(nameof(OnDragOverHandler) + " " + item.Item.Name + " " + item.isDraggedOver);
            item.isDraggedOver = true;
            StateHasChanged();
        }
    }

    private void OnDropHandler(JobListItem item)
    {
        item.isDraggedOver = false;
        this.dragenterCounter = 0;
        OnDrop.InvokeAsync(Item.Id);
    }

    private void OnDragStartHandler(JobListItem item)
    {
        OnStartDrag.InvokeAsync(Item.Id); 
    }
}
